/*
 GLSL fragment shader: interpolate 
 Dr. Orion Sky Lawlor, olawlor@acm.org, 2010-09-04 (Public Domain)
*/
const float M_PI=3.1415926535;
uniform sampler2D srctex;
varying vec3 G; // proxy geometry location, world coordinates
varying vec2 texcoords;
uniform vec2 texdel;

/**
 Sample the scene at this location, writing its true color to gl_FragColor.
*/
void sample(void) {
	gl_FragColor = texture2D(srctex,texcoords);
}

/********* Multigrid Rendering Compression Code **************/
uniform float threshold; // error to allow before subdividing
uniform float errormetric; // how to measure "error"
uniform float benchmode;
uniform float multigridCoarsest; // 1.0 means we're at the initial level; <1.0 means a finer level; 0.0 means finest level
uniform sampler2D multigridCoarserTex;  // texture with coarser multigrid levels (last render)
uniform vec4 multigridCoarser; // pixel counts (xy) and 1.0/pixel counts (zw) for last render
uniform vec4 multigridFiner; // pixel counts (xy) and 1.0/pixel counts (zw) for current render target

/**
A 2D polynomial
	5-term polynomial = A+x*(B+x*C) + y*(D + y*G);
	9-term polynomial = A+x*(B+x*C) + y*((D+x*(E+x*F)) + y*(G+x*(H+x*I)));
*/
struct polynomial2D {
	vec3 A,B,C,D,E,F,G,H,I;
};

vec3 eval_polynomial2D_3(polynomial2D p,float x,float y) // linear
{
	return p.A+x*(p.B) + y*(p.D);
}

vec3 eval_polynomial2D_5(polynomial2D p,float x,float y)  // quadratic
{
	return p.A+x*(p.B+x*p.C) + y*(p.D + y*p.G);
}

vec3 eval_polynomial2D_9(polynomial2D p,float x,float y)  // mixed terms
{
	return p.A+x*(p.B+x*p.C) + y*((p.D+x*(p.E+x*p.F)) + y*(p.G+x*(p.H+x*p.I)));
}

/* for error analysis */
struct err_list {
	float errs[12];
};
bool needs_sample(err_list e,int nerr,float sumScale)
{
	float sum=0.0;
	for (int i=0;i<nerr;i++) {
		sum+=e.errs[i];
		if (sum>threshold) return true;
		sum*=sumScale; // scale==1: sum; scale==0: max
	}
	return false;
}	


/*
  If this location is smooth in the coarse image, 
  fit a polynomial to interpolate, write gl_FragColor, and return true.
  If it's a bad fit, return false;
*/
bool multigridCoarseFits() 
{
	vec2 texcoords = gl_FragCoord.xy*multigridFiner.zw;
	vec2 coarsePixel = texcoords * multigridCoarser.xy; // our pixel coordinates in coarserTex
	vec2 coarseCenter = coarsePixel - fract(coarsePixel) + vec2(0.5); // center of coarse pixel
	vec2 cen=coarseCenter*multigridCoarser.zw; // interpolation center texcoords in coarserTex
	vec2 del=vec2(multigridCoarser.zw); // interpolation size texcoords
	
	/* Fetch pixel neighborhood in coarser image 
		y: Top (+), Middle, Bottom (-)
		x: Left (-), Center, Right (+)
	*/
	vec3 TL = vec3(texture2D(multigridCoarserTex,cen+vec2(-del.x,+del.y)));
	vec3 TC = vec3(texture2D(multigridCoarserTex,cen+vec2(   0.0,+del.y)));
	vec3 TR = vec3(texture2D(multigridCoarserTex,cen+vec2(+del.x,+del.y)));
		
	vec3 ML = vec3(texture2D(multigridCoarserTex,cen+vec2(-del.x,0.0)));
	vec3 MC = vec3(texture2D(multigridCoarserTex,cen+vec2(   0.0,0.0)));
	vec3 MR = vec3(texture2D(multigridCoarserTex,cen+vec2(+del.x,0.0)));
	
	vec3 BL = vec3(texture2D(multigridCoarserTex,cen+vec2(-del.x,-del.y)));
	vec3 BC = vec3(texture2D(multigridCoarserTex,cen+vec2(   0.0,-del.y)));
	vec3 BR = vec3(texture2D(multigridCoarserTex,cen+vec2(+del.x,-del.y)));

	// Build interpolation polynomial to match central 5 points
	polynomial2D p3;
	p3.A = MC;  // constant term
	p3.B = (MR-ML)*0.5; // linear term
	p3.D = (TC-BC)*0.5;
	
	polynomial2D p5=p3;
	p5.C = (MR + ML)*0.5 - MC; // pure quadratic term
	p5.G = (TC + BC)*0.5 - MC;
	
	polynomial2D p9=p5;
	p9.E = (-TL+TR +BL-BR )*0.25; // mixed terms
	p9.F = (+TL+TR -BL-BR )*0.25 - p9.D;
	p9.H = (-TL+TR -BL+BR )*0.25 - p9.B;
	p9.I = (+TL+TR +BL+BR )*0.25 - p9.C - p9.G - MC;
	
	int error=int(errormetric/2.0);
	float errScale=2.0*fract(errormetric/2.0);
	err_list e;

/*
	// Check local errors on closest neighbors
	if (error==0) { // silly metrics
		if (errScale==0.0) { // silly center-outwards
			if (length(texcoords-vec2(0.5,0.5))<0.25*threshold) return false;
		}
		else { // pseudorandom
			if (fract(fract(123.456*texcoords.x)+65.321*fract(78.9012*texcoords.y))<0.5*threshold) return false;
		}
	}
	else if (error==1) { // 4 neighbors
		e.errs[0]=length(MC-TC);
		e.errs[1]=length(MC-ML);
		e.errs[2]=length(MC-MR);
		e.errs[3]=length(MC-BC);
		if (needs_sample(e,4,errScale)) return false;
	}
	else if (error==2) { // 8 neighbors
		e.errs[0]=length(MC-TC);
		e.errs[1]=length(MC-ML);
		e.errs[2]=length(MC-MR);
		e.errs[3]=length(MC-BC);
		e.errs[4]=length(MC-TL);
		e.errs[5]=length(MC-TR);
		e.errs[6]=length(MC-BL);
		e.errs[7]=length(MC-BR);
		if (needs_sample(e,8,errScale)) return false;
	} 
	else 
*/
/*
	if (error==87) 
	{ // Mitchell[87]'s contrast measure
		vec3 cmax=max(MC, max(
			max(max(TL,TR),max(BL,BR)),
			max(max(TC,BC),max(ML,MR))
		));
		vec3 cmin=min(MC, min(
			min(min(TL,TR),min(BL,BR)),
			min(min(TC,BC),min(ML,MR))
		));
		vec3 contrast=(cmax-cmin)/(cmax+cmin);
		if (
			max(max(contrast.r,contrast.g),contrast.b)
			>threshold
		   ) return false;
	} 
*/
	{ // interpolating polynomials, level 10
		int order=0;
		while (error>=10) { error-=10; order++; }
		int nerr=0;
		
		int nbormax=1+error-error/2; // manhattan distance to neighbors that count
		
		float nbor=1.0+float(error/2); // pixels to search
// error 0: nbormax 1, nbor 1 (4 neighbors)
//error 1: nbormax 2, nbor 1 (8 neighbors)
//error 2: nbormax 2, nbor 2 (12 neighbors)
//error 3: nbormax 3, nbor 2 (20)
//error 4: nbormax 3, nbor 3 (24)
//error 5: nbormax 4, nbor 3 (46)

		for (float nborY=-nbor;nborY<=nbor;nborY++)
		for (float nborX=-nbor;nborX<=nbor;nborX++)
		{
			float nborlen=abs(nborX)+abs(nborY);
			if (nborlen>=1.0 && nborlen<=float(nbormax))
			{
				vec3 cv=vec3(texture2D(multigridCoarserTex,cen+del*vec2(nborX,nborY)));
				vec3 pv;
				if (order==0) pv=p3.A; // constant
				if (order==1) pv=eval_polynomial2D_3(p3,nborX,nborY);
				if (order==2) pv=eval_polynomial2D_5(p5,nborX,nborY);
				if (order==3) pv=eval_polynomial2D_9(p9,nborX,nborY);
				float err=length(pv-cv);
				e.errs[nerr++]=err;
			}
		}
		
		if (needs_sample(e,nerr,errScale)) return false;
	}
	
/*
	case 6: case 7: // p3 vs 4 neighbors (max)
		errs[0]=matches_polynomial2D_3(p3,0.0,+1.0,TC);
		errs[1]=matches_polynomial2D_3(p3,0.0,+1.0,TC);
		errs[2]=matches_polynomial2D_3(p3,0.0,+1.0,TC);
		errs[3]=matches_polynomial2D_3(p3,0.0,+1.0,TC);
		if (errs_too_big(errs,4)) return false;
		break;
	
		if (>threshold) return false;
		if (length(MC-ML)>threshold) return false;
		if (length(MC-MR)>threshold) return false;
		if (length(MC-BC)>threshold) return false;
		
	
	// Check 3-term polynomial fit
*/
	
/*
	// Build interpolation polynomial to match central 5 points
	polynomial2D p;
	p.A = MC;  // constant term
	
	p.B = (MR - ML)*0.5; // linear term
	p.D = (TC - BC)*0.5;
	
	p.C = (MR + ML)*0.5 - MC; // pure quadratic term
	p.G = (TC + BC)*0.5 - MC;

	// Check 5-term polynomial fit against neighborhood
	const float nbor=2.0;
	for (float nborY=-nbor;nborY<=nbor;nborY++)
	for (float nborX=-nbor;nborX<=nbor;nborX++)
	{
		float nborlen=abs(nborX)+abs(nborY);
		if (nborlen>1.0 && nborlen<4.0)
		{
			float error=matches_polynomial2D_5(p,nborX,nborY, 
				vec3(texture2D(multigridCoarserTex,cen+del*vec2(nborX,nborY)))
			);
			if (error>threshold) return false;  // match is poor here.
		}
	}
*/

/*
	error+=matches_polynomial2D_5(p,-1.0,-1.0,BL);
	error+=matches_polynomial2D_5(p,+1.0,-1.0,BR);
	error+=matches_polynomial2D_5(p,-1.0,+1.0,TL);
	error+=matches_polynomial2D_5(p,+1.0,+1.0,TR);
	if (error>threshold) return false;  // match is poor here.
	
	vec2 polycoords=coarsePixel - coarseCenter;
	gl_FragColor = vec4(eval_polynomial2D_9(p,polycoords.x,polycoords.y),1.0); // sucks!
	// gl_FragColor = vec4(eval_polynomial2D_5(p,polycoords.x,polycoords.y),1.0);  // also sucks
*/
	
	
	gl_FragColor = texture2D(multigridCoarserTex,texcoords); // fallback: bilinear
	
	return true; // good fit
}


void main(void) {
	// Special debugging on last level:
	if (multigridCoarsest==0.0) {
		// Sum the "coarser" level (actually fullres image)
		vec4 avgColor=vec4(0.0); float avgCount=0.0;
		
		// Simple sampling
		avgColor = texture2D(multigridCoarserTex, texcoords);
		avgCount = 1.0;
	
	/* Only needed for MSAA:
		vec2 start=texcoords - 0.5*multigridFiner.zw; // one screen pixel
		vec2 end=texcoords + 0.5*multigridFiner.zw;
		for (float subY=start.y;subY<end.y;subY+=multigridCoarser.w) 
		for (float subX=start.x;subX<end.x;subX+=multigridCoarser.z)
		{
			avgColor += texture2D(multigridCoarserTex, vec2(subX,subY));
			avgCount++;
		}
	*/
		
		if (benchmode>=1.0) {
			// Compare against finely sampled true image
			vec4 trueColor = vec4(0.0);
			float del=1.0/16.0; // subsamples for final "true" color check
			for (float subY=-0.5;subY<+0.5;subY+=del) 
			for (float subX=-0.5;subX<+0.5;subX+=del)
			/*
			for (float subY=-1.0;subY<0.0;subY+=del) 
			for (float subX=-1.0;subX<0.0;subX+=del)
			*/
				trueColor += texture2D(srctex, texcoords + multigridFiner.zw*vec2(subX,subY));
			gl_FragColor.rgb = abs(avgColor.rgb/avgCount - trueColor.rgb/trueColor.a);
		} else { // write out color image normally
			gl_FragColor = avgColor/avgCount;
		}
	}
	else if (multigridCoarsest==1.0 || !multigridCoarseFits()) 
	{ // take expensive samples
		sample(); // writes gl_FragColor
		gl_FragColor.a = multigridCoarsest;
	}
}

