// GL Shading Language version 1.0 Fragment Shader
//  Orion Sky Lawlor, olawlor@acm.org, 2014/03/28 (Public Domain)


// The crazy add-then-subtract stuff below is for multi precision.
// NVIDIA optimizes it away unless you do this, and add the "precise" keyword below.
#ifdef GL_ARB_gpu_shader5

#extension GL_ARB_gpu_shader5 : enable
#pragma optionNV(fastmath off)
#pragma optionNV(fastprecision off)

#else

#define precise /* null out the keyword for old systems that don't support gpu_shader5 */

#endif


uniform float mandelfunk1,mandelfunk2;

uniform float time;

// Vertex/fragment shader interface:
//   This is the mandelbrot constant
varying vec4 mandConst; 


//  From NVIDIA CUDA samples, 2_Graphics/Mandelbrot, modified for GLSL
//  See also: https://www.thasler.org/blog/?p=93
// Double single functions based on DSFUN90 package:
// http://crd.lbl.gov/~dhbailey/mpdist/index.html
struct double_single {
	precise float a0,a1; // high and low order halves of extended precision number
};

// This function sets the DS number equal to the floating point number B.
double_single dseq(float b)
{
	double_single ret;
	ret.a0 = float(b);
	ret.a1 = 0.0; // float(b - ret.a0);
	return ret;
} // dsdcp

// This function sets the DS number equal to the floating point number B (high) and C (low).
double_single dseq(float b,float c)
{
	double_single ret;
	ret.a0 = b;
	ret.a1 = c;
	return ret;
} // dsdcp


// This function computes c = a + b.
double_single dsadd(double_single a,double_single b)
{
    // Compute dsa + dsb using Knuth's trick.
    float t1 = a.a0 + b.a0;
    float e = t1 - a.a0;
    float t2 = float(float(b.a0 - e) + float(a.a0 - float(t1 - e))) + a.a1 + b.a1;

    // The result is t1 + t2, after normalization.
    double_single ret;
    ret.a0 = e = t1 + t2;
    ret.a1 = t2 - float(e - t1);
    return ret;
} // dsadd

// This function computes c = a - b.
double_single dssub(double_single a,double_single b)
{
    // Compute dsa - dsb using Knuth's trick.
    float t1 = a.a0 - b.a0;
    float e = t1 - a.a0;
    float t2 = float(float(-b.a0 - e) + float(a.a0 - float(t1 - e))) + a.a1 - b.a1;

    // The result is t1 + t2, after normalization.
    double_single ret;
    ret.a0 = e = t1 + t2;
    ret.a1 = t2 - float(e - t1);
    return ret;
} // dssub

// This function multiplies DS numbers A and B to yield the DS product C.
double_single dsmul(double_single a,double_single b)
{
    // This splits dsa(1) and dsb(1) into high-order and low-order words.
    float cona = a.a0 * 8193.0f;
    float conb = b.a0 * 8193.0f;
    float sa1 = cona - float(cona - a.a0);
    float sb1 = conb - float(conb - b.a0);
    float sa2 = a.a0 - sa1;
    float sb2 = b.a0 - sb1;

    // Multilply a0 * b0 using Dekker's method.
    float c11 = a.a0 * b.a0;
    float c21 = float(float(float(sa1 * sb1 - c11) + sa1 * sb2) + sa2 * sb1) + sa2 * sb2;

    // Compute a0 * b1 + a1 * b0 (only high-order word is needed).
    float c2 = a.a0 * b.a1 + a.a1 * b.a0;

    // Compute (c11, c21) + c2 using Knuth's trick, also adding low-order product.
    float t1 = c11 + c2;
    float e = t1 - c11;
    float t2 = float(float(c2 - e) + float(c11 - float(t1 - e))) + c21 + a.a1 * b.a1;

    // The result is t1 + t2, after normalization.
    double_single c;
    c.a0 = e = t1 + t2;
    c.a1 = t2 - float(e - t1);
    return c;
} // dsmul



uniform float center_x, center_y, center_low_x, center_low_y, zoom;


// Input: from vertex.txt.  Output: gl_FragColor.
void take_sample(bool doSample,bool lastPass)
{
if (doSample) {
	double_single zr=dseq(0.0), zi=dseq(0.0);
	
	// Low-precision version:
	// double_single cr=dseq(mandConst.x), ci=dseq(mandConst.y);
	
	// High-precision version:
	double_single cr=dsadd(dseq(mandConst.z*zoom),dseq(center_x,center_low_x));
	double_single ci=dsadd(dseq(mandConst.w*zoom),dseq(center_y,center_low_y));
	
	int i;
	for (i=0;i<255;i++) {
		double_single nzr=dssub(dsmul(zr,zr),dsmul(zi,zi));
		zi=dsmul(zr,zi); zi=dsadd(zi,zi); // *2.0
		
		zr=dsadd(nzr,cr);
		zi=dsadd(zi,ci);
		
		if (zr.a0*zr.a0 + zi.a0*zi.a0 > 4.0) break;
	}
	
	gl_FragColor=vec4((float(i)+0.5)*(1.0/256.0),0.0,0.0,1.0);
}

if (lastPass) {
	float i=256.0*gl_FragColor.r;
	
	// Output cool sinusoidal colors
	gl_FragColor=vec4(
		0.5*sin(0.014*float(i))+0.5*fract(0.12*time), /* Red */
		0.5*sin(0.01*float(i))+0.5*fract(0.2*time), /* Green */
		fract(float(i)*(1.0/128.0)+0.15*time), // 0.1*(z.x*z.x + z.y*z.y), /* Blue */
		0.999 /* Alpha */
	);
	
	if (false && !doSample)
		gl_FragColor=vec4(0.0); // mark interpolated pixels in black
	
}

}



/********* Multigrid Rendering Compression Code **************/
uniform float threshold; // error to allow before subdividing
uniform float multigridCoarsest; // 1.0 means we're at the initial level; <1.0 means a finer level; 0.0 means finest level
uniform sampler2D multigridCoarserTex;  // texture with coarser multigrid levels (last render)
uniform vec4 multigridCoarser; // pixel counts (xy) and 1.0/pixel counts (zw) for last render
uniform vec4 multigridFiner; // pixel counts (xy) and 1.0/pixel counts (zw) for current render target


/*
  If this location is smooth in the coarse image, 
  fit a polynomial to interpolate, write gl_FragColor, and return true.
  If it's a bad fit, return false;
*/
bool multigridCoarseFits() 
{
	vec2 texcoords = gl_FragCoord.xy*multigridFiner.zw;
	vec2 coarsePixel = texcoords * multigridCoarser.xy; // our pixel coordinates in coarserTex
	vec2 coarseCenter = coarsePixel - fract(coarsePixel) + vec2(0.5); // center of coarse pixel
	vec2 cen=coarseCenter*multigridCoarser.zw; // interpolation center texcoords in coarserTex
	vec2 del=vec2(multigridCoarser.zw); // interpolation size texcoords
	
	/* Fetch pixel neighborhood in coarser image 
		y: Top (+), Middle, Bottom (-)
		x: Left (-), Center, Right (+)
	*/
	float TL = float(texture2D(multigridCoarserTex,cen+vec2(-del.x,+del.y)));
	float TC = float(texture2D(multigridCoarserTex,cen+vec2(   0.0,+del.y)));
	float TR = float(texture2D(multigridCoarserTex,cen+vec2(+del.x,+del.y)));
		
	float ML = float(texture2D(multigridCoarserTex,cen+vec2(-del.x,0.0)));
	float MC = float(texture2D(multigridCoarserTex,cen+vec2(   0.0,0.0)));
	float MR = float(texture2D(multigridCoarserTex,cen+vec2(+del.x,0.0)));
	
	float BL = float(texture2D(multigridCoarserTex,cen+vec2(-del.x,-del.y)));
	float BC = float(texture2D(multigridCoarserTex,cen+vec2(   0.0,-del.y)));
	float BR = float(texture2D(multigridCoarserTex,cen+vec2(+del.x,-del.y)));

/*
	// Trivial P1 version, just to get running:
	if (length(MC-TC)+length(MC-ML)+length(MC-MR)+length(MC-BC)>threshold)
		return false; // need a sample here
*/
	// P3 8-neighbor check
	float A=MC; // constant term
	float X=(MR-ML)*0.5; // x dependence
	float Y=(TC-BC)*0.5; // y dependence
	if (
		length(A-X - ML)+
		length(A+X - MR)+
		length(A-Y - BC)+
		length(A+Y - TC)+
		length(A-X-Y - BL)+
		length(A+X-Y - BR)+
		length(A-X+Y - TL)+
		length(A+X+Y - TR)
		>threshold)
		return false; // need a sample here

	gl_FragColor = texture2D(multigridCoarserTex,texcoords); // fallback: bilinear
	
	return true; // good fit
}


void main(void) {
	bool doSample=false;
	if (multigridCoarsest==1.0) {
		doSample=true; // initial pass: render everything
	}
	else { // check if coarser grid can handle it (if so, write to glFragColor)
		doSample=!multigridCoarseFits(); // may write gl_FragColor
	}
	
	bool lastPass=(multigridCoarsest==0.0);
	if (doSample || lastPass)
	{ // Run user's sampling function
		take_sample(doSample,lastPass); // writes gl_FragColor
	}
}

