/*
 GLSL fragment shader: raytracer with planetary atmosphere.
 Dr. Orion Sky Lawlor, olawlor@acm.org, 2010-09-04 (Public Domain)
*/
const float M_PI=3.1415926535;

const float km=1.0/6371.0; // convert kilometers to render units (planet radii)
const float dt=1.0*km; /* sampling rate for aurora: fine sampling gets *SLOW* */

const float miss_t=100.0; // t value for a miss
const float min_t=0.000001; // minimum acceptable t value
uniform float time_uniform; // time in seconds
uniform vec3 C; // camera position, world coordinates
varying vec3 G; // proxy geometry location, world coordinates

/* A 3D ray shooting through space */
struct ray {
	vec3 S, D; /* start location and direction (unit length) */
};
vec3 ray_at(ray r,float t) { return r.S+r.D*t; }

/* A span of ray t values */
struct span {
	float l,h; /* lowest, and highest t value */
};

/* Everything about a ray-object hit point */
struct ray_intersection {
	float t; // t along the ray
	vec3 P; // intersection point, in world coordinates
	vec3 N; // surface normal at intersection point
};

struct sphere {
	vec3 center;
	float r;
};

/* Return t value at first intersection of ray and sphere */
float intersect_sphere(sphere s, ray r) {
	float b=2.0*dot(r.S-s.center,r.D), 
		c=dot(r.S-s.center,r.S-s.center)-s.r*s.r;
	float det = b*b-4.0*c;
	if (det<0.0) {return miss_t;} /* total miss */
	float t = (-b - sqrt(det)) *0.5;
	if (t<min_t) {return miss_t;} /* behind head: miss! */
	return t;
}

/* Return span of t values at intersection region of ray and sphere */
span span_sphere(sphere s, ray r) {
	float b=2.0*dot(r.S-s.center,r.D), 
		c=dot(r.S-s.center,r.S-s.center)-s.r*s.r;
	float det = b*b-4.0*c;
	if (det<0.0) {return span(miss_t,miss_t);} /* total miss */
	float sd=sqrt(det);
	float tL = (-b - sd) *0.5;
	float tH = (-b + sd) *0.5;
	return span(tL,tH);
}

float sqr(float x) {return x*x;}

uniform sampler2D auroradeposition; // deposition function

/* Return the amount of auroral energy deposited at this height,
   measured in planetary radii. */
vec3 deposition_function(float height)
{
	if (false) {
	// Fixed intensity version
		return vec3(1.0); 
	}
	
	height-=1.0; /* convert to altitude (subtract off planet's radius) */

	if (true) {
	// Texture lookup
		float max_height=300.0*km;
		vec3 tex=vec3(texture2D(auroradeposition, vec2(0.4, 1.0-height/max_height)));
		return tex*tex; // HDR storage
		//return exp(-10.0*tex); // reconstruct from decibels (old way, fine but slow!)
	}

// Analytic atmosphere model.  Because the thermosphere is not a uniform temperature or composition, this isn't the same as the low-atmosphere version below.
	float scaleheight=7.3*km; /* "scale height," where atmosphere reaches 1/e thickness (planetary radius units) */
	float extra_scale=(height-100.0*km)*(7.0*km/(300.0*km));
	/* HACK: adjust k to deal with atmospheric nonlinearity, 
	    and mix of energies.  
		The effect of this is to make the final curtains higher
 	*/
	scaleheight+=max(extra_scale,0.0); 
	
	float k=1.0/scaleheight; /* atmosphere density = refDen*exp(-(height-refHt)*k) */
	float refDen=1033.0*(k); /* atmosphere density at surface, in grams/square cm (1000*psi) */
	
	float rho=refDen*exp(-(height)*k); // atmosphere density (approx 1/100)
	float R=rho/(k); /* weight of atmosphere above this point (==integral rho) */
	
	// For monodirectional incoming radiation:
	const float C1=2.11685, C2=2.97035, C3=2.09710, C4=0.74054, C5=0.58795, C6=1.72746, C7=1.37459, C8=0.93296;

	const float E_max=10.0; // keV
	float y = pow((R/4.5e-6),1.0/1.65)/E_max;
	float constant = 0.1; // scale to rendering units (flux rate, etc)
	float E_z = constant* rho / (2.0*R) * ( C1*pow(y,C2)*exp(-C3*pow(y,C4)) + C5*pow(y,C6)*exp(-C7*pow(y,C8)));

	return vec3(E_z);
}

// Apply nonlinear tone mapping to final summed output color
vec3 tonemap(vec3 color) {
	float len=length(color)+0.000001;
	//return color/len*(1.0-exp(-len)); /* new length only asymptotically approaches 1 */
	return color*pow(len,1.0/2.2-1.0); /* convert to sRGB: scale by len^(1/2.2)/len */
	//return color*pow(len,1.0/3.0-1.0); // for printing: gamma of 3.0
}


uniform sampler2D auroratex; // actual curtains and color
uniform sampler2D auroradistance; // distance from curtains (0==far away, 1==close)
/* Convert a 3D location to a 2D aurora map index (polar stereographic) */
vec2 downtomap(vec3 worldloc) {
	vec3 onplanet=normalize(worldloc);
	vec2 mapcoords=vec2(onplanet)*0.5+vec2(0.5); // on 2D polar stereo map
	return mapcoords;
}

/* Sample the aurora's color at this 3D point */
vec3 sample_aurora(vec3 loc) {
		/* project sample point to surface of planet, and look up in texture */
		float r=length(loc);
		vec3 deposition=deposition_function(r);
		vec3 curtain=vec3(texture2D(auroratex,downtomap(loc)).g);
		return deposition*curtain;
}

/* Sample the aurora's color along this ray, and return the summed color */
vec3 sample_aurora(ray r,span s) {
	if (s.h<0.0) return vec3(0.0); /* whole span is behind our head */
	if (s.l<0.0) s.l=0.0; /* start sampling at observer's head */
	
	float pathlength=s.h-s.l; // ray span length
	vec3 auroraglow=0.0*pathlength*vec3(0,1,0); // generalized glow (overall in layer)
	
	const float aurorascale=dt/(30.0*km); /* scale factor: samples at dt -> screen color */
	
	/* Sum up aurora light along ray span */
	vec3 sum=vec3(0.0);
	vec3 loc=ray_at(r,s.l); /* start point along ray */
	vec3 step=r.D*dt;
	float countmiss=0.0, counthit=0.0;
	float t=s.l;
	if (false) { // stupid walk along ray (8.4fps)
		vec3 loc=ray_at(r,t);
		while (t<s.h) {
			sum+=sample_aurora(loc); // real curtains
			t+=dt; loc+=step;
		}
	} else if (true) { // very-low-branch version (38fps)
		while (t<s.h) {
			vec3 loc=ray_at(r,t);
			sum+=sample_aurora(loc); // real curtains
			float dist=(0.99-texture2D(auroradistance,downtomap(loc)).r)*0.20;
			if (dist<dt) dist=dt;
			t+=dist;
			counthit++;
		}
	} else if (false) { // low-branch version (32fps)
		while (t<s.h) {
			vec3 loc=ray_at(r,t);
			float dist=(0.99-texture2D(auroradistance,downtomap(loc)).r)*0.20;
			if (dist<dt) {
				sum+=sample_aurora(loc); // real curtains
				dist=dt;
			}
			t+=dist;
			counthit++;
		}
	} else { // high-branch adaptive distance (4-7fps)
		while (t<s.h) {
			vec3 loc=ray_at(r,t);
			float dist=(0.99-texture2D(auroradistance,downtomap(loc)).r)*0.20;
			if (dist<dt) { // we're inside the aurora--sample
				// sum+=vec3(0.0,1.0,0.0); // sampling testing: green sheets
				//for (int rep=0;rep<4;rep++) { // unroll for up to 7fps
					sum+=sample_aurora(loc); // real curtains
					t+=dt; loc+=step;
				//}
				//counthit++;
			}
			else { // still far from the curtain--jump ahead
				t+=dist; 
				//countmiss++;
			}
		}
	}
	
	//return 0.1*vec3(countmiss,counthit,0.0); // hitcolors
	return sum*aurorascale + auroraglow; // full curtain
}

uniform sampler2D nightearthtex;

// Get the glowing color of the planet
vec3 sample_planet(vec3 P) {
	float x=P.x, y=P.y, z=P.z;
	
	float r=length(vec2(x,y));
	float latitude=atan(z/r)*(1.0/M_PI)+0.5;
	float longitude=fract(atan(y,x)*(0.5/M_PI)+0.0); //+0.5-time_uniform*0.0001);
	vec3 nightearthCast=vec3(0.2,0.18,0.15); // sodium vapor glow
	return nightearthCast*vec3(texture2D(nightearthtex,vec2(longitude,latitude)));
	//return vec3(1,0,0);
	//return i.s.color;
}

/************** Atmosphere Integral Approximation **************/
/**
  Decent little Wikipedia/Winitzki 2003 approximation to erf.
  Supposedly accurate to within 0.035% relative error.
*/
const float a=8.0*(M_PI-3.0)/(3.0*M_PI*(4.0-M_PI));
float erf_guts(float x) {
   float x2=x*x;
   return exp(-x2 * (4.0/M_PI + a*x2) / (1.0+a*x2));
}
// "error function": integral of exp(-x*x)
float win_erf(float x) {
   float sign=1.0;
   if (x<0.0) sign=-1.0;
   return sign*sqrt(1.0-erf_guts(x));
}
// erfc = 1.0-erf, but with less roundoff
float win_erfc(float x) {
   if (x>3.0) { //<- hits zero sig. digits around x==3.9
      // x is big -> erf(x) is very close to +1.0
      // erfc(x)=1-erf(x)=1-sqrt(1-e)=approx +e/2
      return 0.5*erf_guts(x);
   } else {
      return 1.0-win_erf(x);
   }
}


/**
   Compute the atmosphere's integrated thickness along this ray.
   The planet is assumed to be centered at origin, with unit radius.
   This is an exponential approximation:
*/
float atmosphere_thickness(vec3 start,vec3 dir,float tstart,float tend) {
	float scaleheight=8.0*km; /* "scale height," where atmosphere reaches 1/e thickness (planetary radius units) */
	float k=1.0/scaleheight; /* atmosphere density = refDen*exp(-(height-refHt)*k) */
	float refHt=1.0; /* height where density==refDen */
	float refDen=100.0; /* atmosphere opacity per planetary radius */
	/* density=refDen*exp(-(height-refHt)*k) */
	float norm=sqrt(M_PI)/2.0; /* normalization constant */
	
// Step 1: planarize problem from 3D to 2D
	// integral is along ray: tstart to tend along start + t*dir
	float a=dot(dir,dir),b=2.0*dot(dir,start),c=dot(start,start);
	float tc=-b/(2.0*a); //t value at ray/origin closest approach
	float y=sqrt(tc*tc*a+tc*b+c);
	float xL=tstart-tc;
	float xR=tend-tc;
	// integral is along line: from xL to xR at given y
	// x==0 is point of closest approach

// Step 2: Find first matching radius r1-- smallest used radius
	float ySqr=y*y, xLSqr=xL*xL, xRSqr=xR*xR;
	float r1Sqr,r1;
	float isCross=0.0;
	if (xL*xR<0.0) //Span crosses origin-- use radius of closest approach
	{
		r1Sqr=ySqr;
		r1=y;
		isCross=1.0;
	}
	else
	{ //Use either left or right endpoint-- whichever is closer to surface
		r1Sqr=xLSqr+ySqr;
		if (r1Sqr>xRSqr+ySqr) r1Sqr=xRSqr+ySqr;
		r1=sqrt(r1Sqr);
	}
	
// Step 3: Find second matching radius r2
	float del=2.0/k;//This distance is 80% of atmosphere (at any height)
	float r2=r1+del; 
	float r2Sqr=r2*r2;
	//float r3=r1+2.0*del; // <- third radius not needed if we assume B==0
	//float r3Sqr=r3*r3;
	
// Step 4: Find parameters for parabolic approximation to true hyperbolic distance
	// r(x)=sqrt(y^2+x^2), r'(x)=A+Cx^2; r1=r1', r2=r2'
	float x1Sqr=r1Sqr-ySqr; // rSqr = xSqr + ySqr, so xSqr = rSqr - ySqr
	float x2Sqr=r2Sqr-ySqr;
	
	float C=(r1-r2)/(x1Sqr-x2Sqr);
	float A=r1-x1Sqr*C-refHt;
	
// Step 5: Compute the integral of exp(-k*(A+Cx^2)) from x==xL to x==xR
	float sqrtKC=sqrt(k*C); // variable change: z=sqrt(k*C)*x; exp(-z^2)
	float erfDel;
	if (isCross>0.0) { //xL and xR have opposite signs-- use erf normally
		erfDel=win_erf(sqrtKC*xR)-win_erf(sqrtKC*xL);
	} else { //xL and xR have same sign-- flip to positive half and use erfc
		if (xL<0.0) {xL=-xL; xR=-xR;}
		erfDel=win_erfc(sqrtKC*xR)-win_erfc(sqrtKC*xL);
		//if (xL>0.0) {xL=-xL; xR=-xR;} // flip to negative half (more roundoff)
		//erfDel=win_erf(sqrtKC*xR)-win_erf(sqrtKC*xL);
	}
	if (abs(erfDel)>1.0e-10) /* parabolic approximation has acceptable roundoff */
	{
		float eScl=exp(-k*A); // from constant term of integral
		return refDen*norm*eScl/sqrtKC*abs(erfDel);
	} 
	else { /* erfDel==0.0 -> Roundoff!  Switch to a linear approximation:
		a.) Create linear approximation r(x) = M*x+B
		b.) integrate exp(-k*(M*x+B-1.0)) dx, from xL to xR
		   integral = (1.0/(-k*M)) * exp(-k*(M*x+B-1.0))
		*/
		float x1=sqrt(x1Sqr), x2=sqrt(x2Sqr); 
		float M=(r2-r1)/(x2-x1); /* linear fit at (x1,r1) and (x2,r2) */
		float B=r1-M*x1-1.0;
		
		float t1=exp(-k*(M*xL+B));
		float t2=exp(-k*(M*xR+B));
		return abs(refDen*(t2-t1)/(k*M));
	}
}


uniform samplerCube stars;
uniform sampler2D clouds;

/**
 Render the scene, either because we predict this ray is needed (doSample),
 or because this is the final composite step (lastPass).
 
 Write the result to gl_FragColor.
*/
void sample(bool doSample,bool lastPass) {
	// Start with a camera ray
	ray r=ray(C,normalize(G-C)); // points from camera toward proxy
	
	vec3 planet=vec3(0.0,0.0,0.0); 

	// Planet itself
	float planet_t=intersect_sphere(sphere(vec3(0.0,0.0,0.0),1.0),r);

	// Atmosphere
	span airspan=span_sphere(sphere(vec3(0.0,0.0,0.0),75.0*km+1.0),r);
	if (airspan.h>planet_t) {airspan.h=planet_t;} // looking down at planet
	if (airspan.l<0.0) {airspan.l=0.0;} // looking up
	const vec3 airColor = 0.05*vec3(0.4,0.5,0.7);
	float airMass=0.0;
	if (airspan.h<miss_t && airspan.h > 0.0) {
		airMass=atmosphere_thickness(r.S,r.D,airspan.l,airspan.h);
		// airMass=2.0*(airspan.h-airspan.l); // silly fixed-density model
	}
	float airTransmit=exp(-airMass); // fraction of light penetrating atmosphere
	float airInscatter=1.0-airTransmit; // fraction added by atmosphere
	
	// add: thin-shell of airglow

if (doSample) { // expensive aurora calculation (BULK of cost!)
	// Compute intersection ranges with all our geometry
	span auroraL=span_sphere(sphere(vec3(0.0,0.0,0.0),85.0*km+1.0),r);
	span auroraH=span_sphere(sphere(vec3(0.0,0.0,0.0),300.0*km+1.0),r);

	/* Aurora: just getting the sampling ranges right is tricky!
	
		SKIM only hits upper aurora shell:
		   H.l  (aurora) H.h
	
		BOTH enters aurora layer twice.  Far aurora may need to be air-attenuated.
		   H.l  (post-air aurora)  L.l    (planet+air)    L.h (pre-air aurora) H.h
	
		MAIN is a typical planet-hitting ray:
		   H.l  (aurora)  L.l    (air+planet)
	*/
	vec3 aurora=vec3(0.0);
	if (auroraL.l>=miss_t) 
	{ // SKIM: we miss the lower boundary
		aurora=sample_aurora(r,span(auroraH.l,auroraH.h)); // upper shell
	}
	else if (planet_t>=miss_t) 
	{ // BOTH: second stretch of pre-air aurora on far side of atmosphere
		planet+=sample_aurora(r,span(auroraL.h,auroraH.h)); // pre atmosphere
		aurora=sample_aurora(r,span(auroraH.l,auroraL.l)); // post atmosphere
	} 
	else 
	{ // MAIN: common planet-hitting case
		aurora=sample_aurora(r,span(auroraH.l,auroraL.l)); // post atmosphere
	}
	
	vec3 total=aurora + airInscatter*airColor + airTransmit*planet;
	
	// Must delay tone mapping until the very end, so we can sum pre and post atmosphere parts... 
	gl_FragColor = vec4(tonemap(total),1.0);
}

if (lastPass) { // planet and stars only on last pass
	if (planet_t<miss_t) { // hit the planet
		vec3 p=ray_at(r,planet_t);
		planet=vec3(0.5,0.45,0.4)*sample_planet(p);// vec3(texture2D(clouds,vec2(30.0*p)));
	}
	else { // missed planet, hit stars
		vec3 dir=r.D; dir.x=-dir.x; // gotta flip it inside out
		vec4 starcube=textureCube(stars,dir); 
		float s=length(vec3(starcube));
		starcube*=pow(s,4); // tweak star contrast
		planet=0.1*vec3(starcube);
	}
	
	gl_FragColor = gl_FragColor + airTransmit*vec4(planet,1.0);
}

}



/********* Multigrid Rendering Compression Code **************/
uniform float threshold; // error to allow before subdividing
uniform float multigridCoarsest; // 1.0 means we're at the initial level; <1.0 means a finer level; 0.0 means finest level
uniform sampler2D multigridCoarserTex;  // texture with coarser multigrid levels (last render)
uniform vec4 multigridCoarser; // pixel counts (xy) and 1.0/pixel counts (zw) for last render
uniform vec4 multigridFiner; // pixel counts (xy) and 1.0/pixel counts (zw) for current render target


/*
  If this location is smooth in the coarse image, 
  fit a polynomial to interpolate, write gl_FragColor, and return true.
  If it's a bad fit, return false;
*/
bool multigridCoarseFits() 
{
	vec2 texcoords = gl_FragCoord.xy*multigridFiner.zw;
	vec2 coarsePixel = texcoords * multigridCoarser.xy; // our pixel coordinates in coarserTex
	vec2 coarseCenter = coarsePixel - fract(coarsePixel) + vec2(0.5); // center of coarse pixel
	vec2 cen=coarseCenter*multigridCoarser.zw; // interpolation center texcoords in coarserTex
	vec2 del=vec2(multigridCoarser.zw); // interpolation size texcoords
	
	/* Fetch pixel neighborhood in coarser image 
		y: Top (+), Middle, Bottom (-)
		x: Left (-), Center, Right (+)
	*/
	vec3 TL = vec3(texture2D(multigridCoarserTex,cen+vec2(-del.x,+del.y)));
	vec3 TC = vec3(texture2D(multigridCoarserTex,cen+vec2(   0.0,+del.y)));
	vec3 TR = vec3(texture2D(multigridCoarserTex,cen+vec2(+del.x,+del.y)));
		
	vec3 ML = vec3(texture2D(multigridCoarserTex,cen+vec2(-del.x,0.0)));
	vec3 MC = vec3(texture2D(multigridCoarserTex,cen+vec2(   0.0,0.0)));
	vec3 MR = vec3(texture2D(multigridCoarserTex,cen+vec2(+del.x,0.0)));
	
	vec3 BL = vec3(texture2D(multigridCoarserTex,cen+vec2(-del.x,-del.y)));
	vec3 BC = vec3(texture2D(multigridCoarserTex,cen+vec2(   0.0,-del.y)));
	vec3 BR = vec3(texture2D(multigridCoarserTex,cen+vec2(+del.x,-del.y)));

/*
	// Trivial P1 version, just to get running:
	if (length(MC-TC)+length(MC-ML)+length(MC-MR)+length(MC-BC)>threshold)
		return false; // need a sample here
*/
	// P3 8-neighbor check
	vec3 A=MC; // constant term
	vec3 X=(MR-ML)*0.5; // x dependence
	vec3 Y=(TC-BC)*0.5; // y dependence
	if (
		length(A-X - ML)+
		length(A+X - MR)+
		length(A-Y - BC)+
		length(A+Y - TC)+
		length(A-X-Y - BL)+
		length(A+X-Y - BR)+
		length(A-X+Y - TL)+
		length(A+X+Y - TR)
		>threshold)
		return false; // need a sample here

	gl_FragColor = texture2D(multigridCoarserTex,texcoords); // fallback: bilinear
	
	return true; // good fit
}


void main(void) {
	bool doSample=false;
	if (multigridCoarsest==1.0) {
		doSample=true; // initial pass: render everything
	}
	else { // check if coarser grid can handle it (if so, write to glFragColor)
		doSample=!multigridCoarseFits(); // may write gl_FragColor
	}
	
	bool lastPass=(multigridCoarsest==0.0);
	if (doSample || lastPass)
	{ // Run user's sampling function
		sample(doSample,lastPass); // writes gl_FragColor
	}
}

